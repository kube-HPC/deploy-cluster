---

- hosts: kube-master[0]
  gather_facts: no
  become: yes
  tasks:
    - fetch:
        src: "/etc/kubernetes/ssl/{{ item }}.pem"
        dest: "{{ playbook_dir }}/../kubespray/kubectl/{{ item }}.pem"
        flat: True
      with_items:
        - admin-{{ inventory_hostname }}-key
        - admin-{{ inventory_hostname }}
        - ca
    - name: export hostname
      set_fact:
        kubectl_name: "{{ inventory_hostname }}"
        apiserver_host: "{{ ansible_ssh_host }}"

- hosts: localhost
  gather_facts: yes
  connection: local
  vars:
    kubectl_name: "{{ hostvars[groups['kube-master'][0]].kubectl_name }}"
    apiserver_host: "{{ hostvars[groups['kube-master'][0]].apiserver_host }}"
    kubeconfig: "{{ lookup('env','HOME') }}/.kube/config.{{ cluster_name }}.tmp"
  tasks:

    # - name: Delete if exists config file
    #   file: path='~/.kube/config' state=absent
    #   register: file

    # - name: check if context exists
    #   command: kubectl config get-contexts kargo
    #   register: kctl
    #   failed_when: kctl.rc == 0

    - name: config set-cluster  "{{ cluster_name }}"
      command: kubectl config --kubeconfig="{{ kubeconfig }}" set-cluster "{{ cluster_name }}" --server=https://{{ apiserver_host }}:6443 --certificate-authority={{ playbook_dir }}/../kubespray/kubectl/ca.pem

    - name: create credentials "{{ cluster_name }}"
      command: kubectl config --kubeconfig="{{ kubeconfig }}" set-credentials "{{ cluster_name }}"-admin --certificate-authority={{ playbook_dir }}/../kubespray/kubectl/ca.pem --client-key={{ playbook_dir }}/../kubespray/kubectl/admin-{{ kubectl_name }}-key.pem --client-certificate={{ playbook_dir }}/../kubespray/kubectl/admin-{{ kubectl_name }}.pem

    - name: set-context "{{ cluster_name }}"
      command: kubectl config --kubeconfig="{{ kubeconfig }}" set-context "{{ cluster_name }}" --cluster="{{ cluster_name }}" --user="{{ cluster_name }}"-admin

    # - name: use-context default-system
    #   command: kubectl config --kubeconfig="{{ kubeconfig }}" use-context "{{ cluster_name }}"

    - name: if exists config file
      file: path=~/.kube/config state=file
      register: config-file

    - name: flaten config file
      shell: |
        kubectl config view --kubeconfig="{{ kubeconfig }}" --flatten > "{{ lookup('env','HOME') }}/.kube/config.{{ cluster_name }}"

    # - name: if exists config file
    #   file: path=~/.kube/config.tmp state=file
    #   register: file-config

    - name: copy to home/ubadmin/admin.conf
      command: scp "{{ lookup('env','HOME') }}/.kube/config.{{ cluster_name }}"  ubadmin@"{{ hostvars[groups['kube-master'][0]].apiserver_host }}":/home/ubadmin/admin.conf

- import_playbook: add-to-path.yml

- hosts: localhost
  tasks:
    - name: merge with existing and switch context to "{{ cluster_name }}"
      shell: |
        KUBECONFIG=~/.kube/config."{{ cluster_name }}":~/.kube/config kubectl config view --flatten > ~/.kube/config.tmp
        rm ~/.kube/config
        cp ~/.kube/config.tmp ~/.kube/config
        kubectl config use-context "{{ cluster_name }}"
# - hosts: localhost
#   become: no
#   tasks:
#     # - stat:
#     #     path: ~/.kube/config
#     #   register: configfile
#   - name: merge with existing and switch context
#     shell: |
#       KUBECONFIG=~/.kube/config."{{ cluster_name }}":~/.kube/config kubectl config view --flatten > ~/.kube/config.tmp"
#       # rm ~/.kube/config
#       # cp ~/.kube/config.tmp ~/.kube/config
#       # kubectl config use-context "{{ cluster_name }}"
#     tags: switchcontext
#     # when: configfile.stat.exists
