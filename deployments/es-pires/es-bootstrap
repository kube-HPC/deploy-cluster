#!/bin/bash

function es-bootstrap()
{
  # this script directory
  local source_dir=$( cd "$(dirname "${BASH_SOURCE[0]}")" && pwd )

  if [[ -z "${KUBESPRAY_HOME}" ]]; then
    source ${KUBESPRAY_HOME}/scripts/util
  fi

  # persistant volume
  if [[ "${USE_PERSISTANT_VOLUMES}" == "true" ]]; then
    kubectl-create ${source_dir}/es-pv-nfs.yaml
  fi

  # # elasticsearch curator
  # kubectl-create ${source_dir}/es-curator-cm.yaml
  # kubectl-create ${source_dir}/es-curator.yaml

  # # elasticsearch cluster
  # kubectl-create ${source_dir}/es-svc.yaml

  # kubectl-create ${source_dir}/es-discovery-svc.yaml

  # kubectl-create ${source_dir}/es-master.yaml
  # wait-pods elasticsearch-master

  # kubectl-create ${source_dir}/es-client.yaml
  # wait-pods elasticsearch-client

  # kubectl-create ${source_dir}/es-data.yaml
  # wait-pods elasticsearch-data

  # # scale

  # if [[ ${LOGGING_ES_REPLICAS_MASTER} > 1 ]]; then
  #   echo "scaling elasticsearch-master (replicas=${LOGGING_ES_REPLICAS_MASTER})"
  #   kubectl scale deployment elasticsearch-master ${NS} --replicas=${LOGGING_ES_REPLICAS_MASTER}
  #   wait-pods elasticsearch-master
  # fi

  # if [[ ${LOGGING_ES_REPLICAS_CLIENT} > 1 ]]; then
  #   echo "scaling elasticsearch-client (replicas=${LOGGING_ES_REPLICAS_CLIENT})"
  #   kubectl scale deployment elasticsearch-client ${NS} --replicas=${LOGGING_ES_REPLICAS_CLIENT}
  #   wait-pods elasticsearch-client
  # fi

  # if [[ ${LOGGING_ES_REPLICAS_DATA} > 1 ]]; then
  #   echo "scaling elasticsearch-data (replicas=${LOGGING_ES_REPLICAS_DATA})"
  #   kubectl scale deployment elasticsearch-data ${NS} --replicas=${LOGGING_ES_REPLICAS_DATA}
  #   wait-pods elasticsearch-data
  # fi

  # # validate es-cluster
  # ES_NAMESPACE=kube-system ${KUBESPRAY_HOME}/scripts/es-health
}

es-bootstrap $@
